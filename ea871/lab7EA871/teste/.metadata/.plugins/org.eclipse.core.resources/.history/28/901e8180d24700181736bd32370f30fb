#define SET_BIT(reg, idx)	reg = (reg | (1 << idx))		// Macro que seta o bit idx do registrador reg
#include "MKL25Z4.h"
#include "derivative.h" /* include peripheral declarations */


void init_UART0(void){
	SET_BIT(SIM_SCGC4, 10);		   			// Habilita clock do UART0 (System Clock Gating Control
	SET_BIT(SIM_SCGC5, 9);		   			// Habilita clock do PORTA (System Clock Gating Control
	
	PORTA_PCR1 = PORTA_PCR1 & 0xFFFFF8FF;	// Zera bits de MUX de PTA1
	PORTA_PCR2 = PORTA_PCR2 & 0xFFFFF8FF;	// Zera bits de MUX de PTA2
	
	SET_BIT(PORTA_PCR1, 9);					// Seta bit 0 do MUX de PTA1, assim os bits de MUX serao 010
	SET_BIT(PORTA_PCR2, 9);					// Seta bit 0 do MUX de PTA2, assim os bits de MUX serao 010
	
	SET_BIT(SIM_SOPT2, 26);		        	//fonte do clock para a UART0 o sinal MCGFLLCLK que opera na frequência de 20.97 MHz
	
	UART0_C4 = UART0_C4 & 0xE0;         	// Zera bits de OSR
	UART0_C4 = UART0_C4 | 0xEF;         	//Configura OSR com 15+1 (01111)
	
	UART0_BDL = UART0_BDL & 0x00;			//Zera bits de UART0_BDL
	UART0_BDL = UART0_BDL | 0x44;			//Configura para BR=68
	
	UART0_BDH = UART0_BDH & 0x00;			//Zera bits de UART0_BDH (1 stop bit e atuacao com pooling)
	
	SET_BIT(UART0_C2, 3);					//Transmitter enabled.
	SET_BIT(UART0_C2, 2);					//Receiver enabled.
	//UART0_C2 = UART0_C2 & 0x0F;				//pooling
	
}

void putchar_UART0(char caractere){
	while(!(UART0_S1 & UART0_S1_TDRE_MASK)) ; 	// se não está vazio (Register Empty), espera 
	UART0_D = caractere; 			// envia caracter a ser transmitido
	return;
}

char getchar_UART0(void){
	int caractere;
	if (UART0_S1 & UART0_S1_RDRF_MASK) {			// verifica se existe um novo caractere na UART0 (Register Full)
		caractere = UART0_D; 		// lê o caractere 
	} else {
		caractere = 0;
	}
	return caractere;
}


void puts_UART0(char *string){
	int i = 0;
	
	while(string[i] != '\0'){
		putchar_UART0(string[i]);
		i++;
	}
	return;
}
