// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/28/2018 21:05:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decoderFinal
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decoderFinal_vlg_sample_tst(
	end_cont,
	end_ext,
	instr,
	result,
	Z,
	sampler_tx
);
input [4:0] end_cont;
input [4:0] end_ext;
input [7:0] instr;
input [4:0] result;
input  Z;
output sampler_tx;

reg sample;
time current_time;
always @(end_cont or end_ext or instr or result or Z)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decoderFinal_vlg_check_tst (
	clear,
	DATA_BAR,
	enA,
	enAc,
	enB,
	End_CP,
	enF,
	ldab,
	ldam,
	LOAD_CP,
	load_ULA,
	movAc,
	R/W,
	stac,
	sampler_rx
);
input  clear;
input [2:0] DATA_BAR;
input  enA;
input  enAc;
input  enB;
input [4:0] End_CP;
input  enF;
input  ldab;
input  ldam;
input  LOAD_CP;
input  load_ULA;
input  movAc;
input  R/W;
input  stac;
input sampler_rx;

reg  clear_expected;
reg [2:0] DATA_BAR_expected;
reg  enA_expected;
reg  enAc_expected;
reg  enB_expected;
reg [4:0] End_CP_expected;
reg  enF_expected;
reg  ldab_expected;
reg  ldam_expected;
reg  LOAD_CP_expected;
reg  load_ULA_expected;
reg  movAc_expected;
reg  R/W_expected;
reg  stac_expected;

reg  clear_prev;
reg [2:0] DATA_BAR_prev;
reg  enA_prev;
reg  enAc_prev;
reg  enB_prev;
reg [4:0] End_CP_prev;
reg  enF_prev;
reg  ldab_prev;
reg  ldam_prev;
reg  LOAD_CP_prev;
reg  load_ULA_prev;
reg  movAc_prev;
reg  R/W_prev;
reg  stac_prev;

reg  clear_expected_prev;
reg [2:0] DATA_BAR_expected_prev;
reg  enA_expected_prev;
reg  enAc_expected_prev;
reg  enB_expected_prev;
reg [4:0] End_CP_expected_prev;
reg  enF_expected_prev;
reg  ldab_expected_prev;
reg  ldam_expected_prev;
reg  LOAD_CP_expected_prev;
reg  load_ULA_expected_prev;
reg  movAc_expected_prev;
reg  R/W_expected_prev;
reg  stac_expected_prev;

reg  last_clear_exp;
reg [2:0] last_DATA_BAR_exp;
reg  last_enA_exp;
reg  last_enAc_exp;
reg  last_enB_exp;
reg [4:0] last_End_CP_exp;
reg  last_enF_exp;
reg  last_ldab_exp;
reg  last_ldam_exp;
reg  last_LOAD_CP_exp;
reg  last_load_ULA_exp;
reg  last_movAc_exp;
reg  last_R/W_exp;
reg  last_stac_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:14] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 14'b1;
end

// update real /o prevs

always @(trigger)
begin
	clear_prev = clear;
	DATA_BAR_prev = DATA_BAR;
	enA_prev = enA;
	enAc_prev = enAc;
	enB_prev = enB;
	End_CP_prev = End_CP;
	enF_prev = enF;
	ldab_prev = ldab;
	ldam_prev = ldam;
	LOAD_CP_prev = LOAD_CP;
	load_ULA_prev = load_ULA;
	movAc_prev = movAc;
	R/W_prev = R/W;
	stac_prev = stac;
end

// update expected /o prevs

always @(trigger)
begin
	clear_expected_prev = clear_expected;
	DATA_BAR_expected_prev = DATA_BAR_expected;
	enA_expected_prev = enA_expected;
	enAc_expected_prev = enAc_expected;
	enB_expected_prev = enB_expected;
	End_CP_expected_prev = End_CP_expected;
	enF_expected_prev = enF_expected;
	ldab_expected_prev = ldab_expected;
	ldam_expected_prev = ldam_expected;
	LOAD_CP_expected_prev = LOAD_CP_expected;
	load_ULA_expected_prev = load_ULA_expected;
	movAc_expected_prev = movAc_expected;
	R/W_expected_prev = R/W_expected;
	stac_expected_prev = stac_expected;
end



// expected clear
initial
begin
	clear_expected = 1'bX;
end 
// expected DATA_BAR[ 2 ]
initial
begin
	DATA_BAR_expected[2] = 1'bX;
end 
// expected DATA_BAR[ 1 ]
initial
begin
	DATA_BAR_expected[1] = 1'bX;
end 
// expected DATA_BAR[ 0 ]
initial
begin
	DATA_BAR_expected[0] = 1'bX;
end 

// expected enA
initial
begin
	enA_expected = 1'bX;
end 

// expected enAc
initial
begin
	enAc_expected = 1'bX;
end 

// expected enB
initial
begin
	enB_expected = 1'bX;
end 
// expected End_CP[ 4 ]
initial
begin
	End_CP_expected[4] = 1'bX;
end 
// expected End_CP[ 3 ]
initial
begin
	End_CP_expected[3] = 1'bX;
end 
// expected End_CP[ 2 ]
initial
begin
	End_CP_expected[2] = 1'bX;
end 
// expected End_CP[ 1 ]
initial
begin
	End_CP_expected[1] = 1'bX;
end 
// expected End_CP[ 0 ]
initial
begin
	End_CP_expected[0] = 1'bX;
end 

// expected enF
initial
begin
	enF_expected = 1'bX;
end 

// expected ldab
initial
begin
	ldab_expected = 1'bX;
end 

// expected ldam
initial
begin
	ldam_expected = 1'bX;
end 

// expected LOAD_CP
initial
begin
	LOAD_CP_expected = 1'bX;
end 

// expected load_ULA
initial
begin
	load_ULA_expected = 1'bX;
end 

// expected movAc
initial
begin
	movAc_expected = 1'bX;
end 

// expected R/W
initial
begin
	R/W_expected = 1'bX;
end 

// expected stac
initial
begin
	stac_expected = 1'bX;
end 
// generate trigger
always @(clear_expected or clear or DATA_BAR_expected or DATA_BAR or enA_expected or enA or enAc_expected or enAc or enB_expected or enB or End_CP_expected or End_CP or enF_expected or enF or ldab_expected or ldab or ldam_expected or ldam or LOAD_CP_expected or LOAD_CP or load_ULA_expected or load_ULA or movAc_expected or movAc or R/W_expected or R/W or stac_expected or stac)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clear = %b | expected DATA_BAR = %b | expected enA = %b | expected enAc = %b | expected enB = %b | expected End_CP = %b | expected enF = %b | expected ldab = %b | expected ldam = %b | expected LOAD_CP = %b | expected load_ULA = %b | expected movAc = %b | expected R/W = %b | expected stac = %b | ",clear_expected_prev,DATA_BAR_expected_prev,enA_expected_prev,enAc_expected_prev,enB_expected_prev,End_CP_expected_prev,enF_expected_prev,ldab_expected_prev,ldam_expected_prev,LOAD_CP_expected_prev,load_ULA_expected_prev,movAc_expected_prev,R/W_expected_prev,stac_expected_prev);
	$display("| real clear = %b | real DATA_BAR = %b | real enA = %b | real enAc = %b | real enB = %b | real End_CP = %b | real enF = %b | real ldab = %b | real ldam = %b | real LOAD_CP = %b | real load_ULA = %b | real movAc = %b | real R/W = %b | real stac = %b | ",clear_prev,DATA_BAR_prev,enA_prev,enAc_prev,enB_prev,End_CP_prev,enF_prev,ldab_prev,ldam_prev,LOAD_CP_prev,load_ULA_prev,movAc_prev,R/W_prev,stac_prev);
`endif
	if (
		( clear_expected_prev !== 1'bx ) && ( clear_prev !== clear_expected_prev )
		&& ((clear_expected_prev !== last_clear_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_expected_prev);
		$display ("     Real value = %b", clear_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clear_exp = clear_expected_prev;
	end
	if (
		( DATA_BAR_expected_prev[0] !== 1'bx ) && ( DATA_BAR_prev[0] !== DATA_BAR_expected_prev[0] )
		&& ((DATA_BAR_expected_prev[0] !== last_DATA_BAR_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_BAR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_BAR_expected_prev);
		$display ("     Real value = %b", DATA_BAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_BAR_exp[0] = DATA_BAR_expected_prev[0];
	end
	if (
		( DATA_BAR_expected_prev[1] !== 1'bx ) && ( DATA_BAR_prev[1] !== DATA_BAR_expected_prev[1] )
		&& ((DATA_BAR_expected_prev[1] !== last_DATA_BAR_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_BAR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_BAR_expected_prev);
		$display ("     Real value = %b", DATA_BAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_BAR_exp[1] = DATA_BAR_expected_prev[1];
	end
	if (
		( DATA_BAR_expected_prev[2] !== 1'bx ) && ( DATA_BAR_prev[2] !== DATA_BAR_expected_prev[2] )
		&& ((DATA_BAR_expected_prev[2] !== last_DATA_BAR_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_BAR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_BAR_expected_prev);
		$display ("     Real value = %b", DATA_BAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_BAR_exp[2] = DATA_BAR_expected_prev[2];
	end
	if (
		( enA_expected_prev !== 1'bx ) && ( enA_prev !== enA_expected_prev )
		&& ((enA_expected_prev !== last_enA_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enA_expected_prev);
		$display ("     Real value = %b", enA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_enA_exp = enA_expected_prev;
	end
	if (
		( enAc_expected_prev !== 1'bx ) && ( enAc_prev !== enAc_expected_prev )
		&& ((enAc_expected_prev !== last_enAc_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enAc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enAc_expected_prev);
		$display ("     Real value = %b", enAc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_enAc_exp = enAc_expected_prev;
	end
	if (
		( enB_expected_prev !== 1'bx ) && ( enB_prev !== enB_expected_prev )
		&& ((enB_expected_prev !== last_enB_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enB_expected_prev);
		$display ("     Real value = %b", enB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_enB_exp = enB_expected_prev;
	end
	if (
		( End_CP_expected_prev[0] !== 1'bx ) && ( End_CP_prev[0] !== End_CP_expected_prev[0] )
		&& ((End_CP_expected_prev[0] !== last_End_CP_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port End_CP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", End_CP_expected_prev);
		$display ("     Real value = %b", End_CP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_End_CP_exp[0] = End_CP_expected_prev[0];
	end
	if (
		( End_CP_expected_prev[1] !== 1'bx ) && ( End_CP_prev[1] !== End_CP_expected_prev[1] )
		&& ((End_CP_expected_prev[1] !== last_End_CP_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port End_CP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", End_CP_expected_prev);
		$display ("     Real value = %b", End_CP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_End_CP_exp[1] = End_CP_expected_prev[1];
	end
	if (
		( End_CP_expected_prev[2] !== 1'bx ) && ( End_CP_prev[2] !== End_CP_expected_prev[2] )
		&& ((End_CP_expected_prev[2] !== last_End_CP_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port End_CP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", End_CP_expected_prev);
		$display ("     Real value = %b", End_CP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_End_CP_exp[2] = End_CP_expected_prev[2];
	end
	if (
		( End_CP_expected_prev[3] !== 1'bx ) && ( End_CP_prev[3] !== End_CP_expected_prev[3] )
		&& ((End_CP_expected_prev[3] !== last_End_CP_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port End_CP[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", End_CP_expected_prev);
		$display ("     Real value = %b", End_CP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_End_CP_exp[3] = End_CP_expected_prev[3];
	end
	if (
		( End_CP_expected_prev[4] !== 1'bx ) && ( End_CP_prev[4] !== End_CP_expected_prev[4] )
		&& ((End_CP_expected_prev[4] !== last_End_CP_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port End_CP[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", End_CP_expected_prev);
		$display ("     Real value = %b", End_CP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_End_CP_exp[4] = End_CP_expected_prev[4];
	end
	if (
		( enF_expected_prev !== 1'bx ) && ( enF_prev !== enF_expected_prev )
		&& ((enF_expected_prev !== last_enF_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enF_expected_prev);
		$display ("     Real value = %b", enF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_enF_exp = enF_expected_prev;
	end
	if (
		( ldab_expected_prev !== 1'bx ) && ( ldab_prev !== ldab_expected_prev )
		&& ((ldab_expected_prev !== last_ldab_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ldab :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ldab_expected_prev);
		$display ("     Real value = %b", ldab_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ldab_exp = ldab_expected_prev;
	end
	if (
		( ldam_expected_prev !== 1'bx ) && ( ldam_prev !== ldam_expected_prev )
		&& ((ldam_expected_prev !== last_ldam_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ldam :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ldam_expected_prev);
		$display ("     Real value = %b", ldam_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ldam_exp = ldam_expected_prev;
	end
	if (
		( LOAD_CP_expected_prev !== 1'bx ) && ( LOAD_CP_prev !== LOAD_CP_expected_prev )
		&& ((LOAD_CP_expected_prev !== last_LOAD_CP_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOAD_CP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOAD_CP_expected_prev);
		$display ("     Real value = %b", LOAD_CP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LOAD_CP_exp = LOAD_CP_expected_prev;
	end
	if (
		( load_ULA_expected_prev !== 1'bx ) && ( load_ULA_prev !== load_ULA_expected_prev )
		&& ((load_ULA_expected_prev !== last_load_ULA_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port load_ULA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", load_ULA_expected_prev);
		$display ("     Real value = %b", load_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_load_ULA_exp = load_ULA_expected_prev;
	end
	if (
		( movAc_expected_prev !== 1'bx ) && ( movAc_prev !== movAc_expected_prev )
		&& ((movAc_expected_prev !== last_movAc_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port movAc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", movAc_expected_prev);
		$display ("     Real value = %b", movAc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_movAc_exp = movAc_expected_prev;
	end
	if (
		( R/W_expected_prev !== 1'bx ) && ( R/W_prev !== R/W_expected_prev )
		&& ((R/W_expected_prev !== last_R/W_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R/W :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R/W_expected_prev);
		$display ("     Real value = %b", R/W_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R/W_exp = R/W_expected_prev;
	end
	if (
		( stac_expected_prev !== 1'bx ) && ( stac_prev !== stac_expected_prev )
		&& ((stac_expected_prev !== last_stac_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stac :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stac_expected_prev);
		$display ("     Real value = %b", stac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_stac_exp = stac_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decoderFinal_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] end_cont;
reg [4:0] end_ext;
reg [7:0] instr;
reg [4:0] result;
reg Z;
// wires                                               
wire clear;
wire [2:0] DATA_BAR;
wire enA;
wire enAc;
wire enB;
wire [4:0] End_CP;
wire enF;
wire ldab;
wire ldam;
wire LOAD_CP;
wire load_ULA;
wire movAc;
wire R/W;
wire stac;

wire sampler;                             

// assign statements (if any)                          
decoderFinal i1 (
// port map - connection between master ports and signals/registers   
	.clear(clear),
	.DATA_BAR(DATA_BAR),
	.enA(enA),
	.enAc(enAc),
	.enB(enB),
	.end_cont(end_cont),
	.End_CP(End_CP),
	.end_ext(end_ext),
	.enF(enF),
	.instr(instr),
	.ldab(ldab),
	.ldam(ldam),
	.LOAD_CP(LOAD_CP),
	.load_ULA(load_ULA),
	.movAc(movAc),
	.\R/W (R/W),
	.result(result),
	.stac(stac),
	.Z(Z)
);
// end_cont[ 4 ]
initial
begin
	end_cont[4] = 1'b0;
end 
// end_cont[ 3 ]
initial
begin
	end_cont[3] = 1'b0;
end 
// end_cont[ 2 ]
initial
begin
	end_cont[2] = 1'b0;
end 
// end_cont[ 1 ]
initial
begin
	end_cont[1] = 1'b0;
end 
// end_cont[ 0 ]
initial
begin
	end_cont[0] = 1'b0;
end 
// end_ext[ 4 ]
initial
begin
	end_ext[4] = 1'b0;
end 
// end_ext[ 3 ]
initial
begin
	end_ext[3] = 1'b0;
end 
// end_ext[ 2 ]
initial
begin
	end_ext[2] = 1'b0;
end 
// end_ext[ 1 ]
initial
begin
	end_ext[1] = 1'b0;
end 
// end_ext[ 0 ]
initial
begin
	end_ext[0] = 1'b0;
end 
// instr[ 7 ]
initial
begin
	instr[7] = 1'b1;
	instr[7] = #960000 1'b0;
end 
// instr[ 6 ]
initial
begin
	instr[6] = 1'b0;
	instr[6] = #320000 1'b1;
	instr[6] = #640000 1'b0;
end 
// instr[ 5 ]
initial
begin
	instr[5] = 1'b1;
	instr[5] = #320000 1'b0;
	instr[5] = #320000 1'b1;
	instr[5] = #320000 1'b0;
end 
// instr[ 4 ]
initial
begin
	repeat(3)
	begin
		instr[4] = 1'b0;
		instr[4] = #160000 1'b1;
		# 160000;
	end
	instr[4] = 1'b0;
end 
// instr[ 3 ]
initial
begin
	repeat(6)
	begin
		instr[3] = 1'b0;
		instr[3] = #80000 1'b1;
		# 80000;
	end
	instr[3] = 1'b0;
end 
// instr[ 2 ]
initial
begin
	repeat(12)
	begin
		instr[2] = 1'b0;
		instr[2] = #40000 1'b1;
		# 40000;
	end
	instr[2] = 1'b0;
end 
// instr[ 1 ]
initial
begin
	instr[1] = 1'b0;
end 
// instr[ 0 ]
initial
begin
	instr[0] = 1'b0;
end 
// result[ 4 ]
initial
begin
	result[4] = 1'b0;
end 
// result[ 3 ]
initial
begin
	result[3] = 1'b0;
end 
// result[ 2 ]
initial
begin
	result[2] = 1'b0;
end 
// result[ 1 ]
initial
begin
	result[1] = 1'b0;
end 
// result[ 0 ]
initial
begin
	result[0] = 1'b0;
end 

// Z
initial
begin
	Z = 1'b0;
end 

decoderFinal_vlg_sample_tst tb_sample (
	.end_cont(end_cont),
	.end_ext(end_ext),
	.instr(instr),
	.result(result),
	.Z(Z),
	.sampler_tx(sampler)
);

decoderFinal_vlg_check_tst tb_out(
	.clear(clear),
	.DATA_BAR(DATA_BAR),
	.enA(enA),
	.enAc(enAc),
	.enB(enB),
	.End_CP(End_CP),
	.enF(enF),
	.ldab(ldab),
	.ldam(ldam),
	.LOAD_CP(LOAD_CP),
	.load_ULA(load_ULA),
	.movAc(movAc),
	.R/W(R/W),
	.stac(stac),
	.sampler_rx(sampler)
);
endmodule

