// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/02/2018 09:13:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    memoriaRAM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module memoriaRAM_vlg_sample_tst(
	address,
	clear,
	clk,
	data,
	R/W,
	sampler_tx
);
input [4:0] address;
input  clear;
input  clk;
input [4:0] data;
input  R/W;
output sampler_tx;

reg sample;
time current_time;
always @(address or clear or clk or data or R/W)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module memoriaRAM_vlg_check_tst (
	data_out,
	disp0,
	disp1,
	disp2,
	disp3,
	enULAregs,
	sampler_rx
);
input [4:0] data_out;
input [4:0] disp0;
input [4:0] disp1;
input [4:0] disp2;
input [4:0] disp3;
input  enULAregs;
input sampler_rx;

reg [4:0] data_out_expected;
reg [4:0] disp0_expected;
reg [4:0] disp1_expected;
reg [4:0] disp2_expected;
reg [4:0] disp3_expected;
reg  enULAregs_expected;

reg [4:0] data_out_prev;
reg [4:0] disp0_prev;
reg [4:0] disp1_prev;
reg [4:0] disp2_prev;
reg [4:0] disp3_prev;
reg  enULAregs_prev;

reg [4:0] data_out_expected_prev;
reg [4:0] disp0_expected_prev;
reg [4:0] disp1_expected_prev;
reg [4:0] disp2_expected_prev;
reg [4:0] disp3_expected_prev;
reg  enULAregs_expected_prev;

reg [4:0] last_data_out_exp;
reg [4:0] last_disp0_exp;
reg [4:0] last_disp1_exp;
reg [4:0] last_disp2_exp;
reg [4:0] last_disp3_exp;
reg  last_enULAregs_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	data_out_prev = data_out;
	disp0_prev = disp0;
	disp1_prev = disp1;
	disp2_prev = disp2;
	disp3_prev = disp3;
	enULAregs_prev = enULAregs;
end

// update expected /o prevs

always @(trigger)
begin
	data_out_expected_prev = data_out_expected;
	disp0_expected_prev = disp0_expected;
	disp1_expected_prev = disp1_expected;
	disp2_expected_prev = disp2_expected;
	disp3_expected_prev = disp3_expected;
	enULAregs_expected_prev = enULAregs_expected;
end


// expected data_out[ 4 ]
initial
begin
	data_out_expected[4] = 1'bX;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 
// expected disp0[ 4 ]
initial
begin
	disp0_expected[4] = 1'bX;
end 
// expected disp0[ 3 ]
initial
begin
	disp0_expected[3] = 1'bX;
end 
// expected disp0[ 2 ]
initial
begin
	disp0_expected[2] = 1'bX;
end 
// expected disp0[ 1 ]
initial
begin
	disp0_expected[1] = 1'bX;
end 
// expected disp0[ 0 ]
initial
begin
	disp0_expected[0] = 1'bX;
end 
// expected disp1[ 4 ]
initial
begin
	disp1_expected[4] = 1'bX;
end 
// expected disp1[ 3 ]
initial
begin
	disp1_expected[3] = 1'bX;
end 
// expected disp1[ 2 ]
initial
begin
	disp1_expected[2] = 1'bX;
end 
// expected disp1[ 1 ]
initial
begin
	disp1_expected[1] = 1'bX;
end 
// expected disp1[ 0 ]
initial
begin
	disp1_expected[0] = 1'bX;
end 
// expected disp2[ 4 ]
initial
begin
	disp2_expected[4] = 1'bX;
end 
// expected disp2[ 3 ]
initial
begin
	disp2_expected[3] = 1'bX;
end 
// expected disp2[ 2 ]
initial
begin
	disp2_expected[2] = 1'bX;
end 
// expected disp2[ 1 ]
initial
begin
	disp2_expected[1] = 1'bX;
end 
// expected disp2[ 0 ]
initial
begin
	disp2_expected[0] = 1'bX;
end 
// expected disp3[ 4 ]
initial
begin
	disp3_expected[4] = 1'bX;
end 
// expected disp3[ 3 ]
initial
begin
	disp3_expected[3] = 1'bX;
end 
// expected disp3[ 2 ]
initial
begin
	disp3_expected[2] = 1'bX;
end 
// expected disp3[ 1 ]
initial
begin
	disp3_expected[1] = 1'bX;
end 
// expected disp3[ 0 ]
initial
begin
	disp3_expected[0] = 1'bX;
end 

// expected enULAregs
initial
begin
	enULAregs_expected = 1'bX;
end 
// generate trigger
always @(data_out_expected or data_out or disp0_expected or disp0 or disp1_expected or disp1 or disp2_expected or disp2 or disp3_expected or disp3 or enULAregs_expected or enULAregs)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected data_out = %b | expected disp0 = %b | expected disp1 = %b | expected disp2 = %b | expected disp3 = %b | expected enULAregs = %b | ",data_out_expected_prev,disp0_expected_prev,disp1_expected_prev,disp2_expected_prev,disp3_expected_prev,enULAregs_expected_prev);
	$display("| real data_out = %b | real disp0 = %b | real disp1 = %b | real disp2 = %b | real disp3 = %b | real enULAregs = %b | ",data_out_prev,disp0_prev,disp1_prev,disp2_prev,disp3_prev,enULAregs_prev);
`endif
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( data_out_expected_prev[4] !== 1'bx ) && ( data_out_prev[4] !== data_out_expected_prev[4] )
		&& ((data_out_expected_prev[4] !== last_data_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[4] = data_out_expected_prev[4];
	end
	if (
		( disp0_expected_prev[0] !== 1'bx ) && ( disp0_prev[0] !== disp0_expected_prev[0] )
		&& ((disp0_expected_prev[0] !== last_disp0_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp0_expected_prev);
		$display ("     Real value = %b", disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp0_exp[0] = disp0_expected_prev[0];
	end
	if (
		( disp0_expected_prev[1] !== 1'bx ) && ( disp0_prev[1] !== disp0_expected_prev[1] )
		&& ((disp0_expected_prev[1] !== last_disp0_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp0_expected_prev);
		$display ("     Real value = %b", disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp0_exp[1] = disp0_expected_prev[1];
	end
	if (
		( disp0_expected_prev[2] !== 1'bx ) && ( disp0_prev[2] !== disp0_expected_prev[2] )
		&& ((disp0_expected_prev[2] !== last_disp0_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp0_expected_prev);
		$display ("     Real value = %b", disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp0_exp[2] = disp0_expected_prev[2];
	end
	if (
		( disp0_expected_prev[3] !== 1'bx ) && ( disp0_prev[3] !== disp0_expected_prev[3] )
		&& ((disp0_expected_prev[3] !== last_disp0_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp0_expected_prev);
		$display ("     Real value = %b", disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp0_exp[3] = disp0_expected_prev[3];
	end
	if (
		( disp0_expected_prev[4] !== 1'bx ) && ( disp0_prev[4] !== disp0_expected_prev[4] )
		&& ((disp0_expected_prev[4] !== last_disp0_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp0_expected_prev);
		$display ("     Real value = %b", disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp0_exp[4] = disp0_expected_prev[4];
	end
	if (
		( disp1_expected_prev[0] !== 1'bx ) && ( disp1_prev[0] !== disp1_expected_prev[0] )
		&& ((disp1_expected_prev[0] !== last_disp1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp1_expected_prev);
		$display ("     Real value = %b", disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp1_exp[0] = disp1_expected_prev[0];
	end
	if (
		( disp1_expected_prev[1] !== 1'bx ) && ( disp1_prev[1] !== disp1_expected_prev[1] )
		&& ((disp1_expected_prev[1] !== last_disp1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp1_expected_prev);
		$display ("     Real value = %b", disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp1_exp[1] = disp1_expected_prev[1];
	end
	if (
		( disp1_expected_prev[2] !== 1'bx ) && ( disp1_prev[2] !== disp1_expected_prev[2] )
		&& ((disp1_expected_prev[2] !== last_disp1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp1_expected_prev);
		$display ("     Real value = %b", disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp1_exp[2] = disp1_expected_prev[2];
	end
	if (
		( disp1_expected_prev[3] !== 1'bx ) && ( disp1_prev[3] !== disp1_expected_prev[3] )
		&& ((disp1_expected_prev[3] !== last_disp1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp1_expected_prev);
		$display ("     Real value = %b", disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp1_exp[3] = disp1_expected_prev[3];
	end
	if (
		( disp1_expected_prev[4] !== 1'bx ) && ( disp1_prev[4] !== disp1_expected_prev[4] )
		&& ((disp1_expected_prev[4] !== last_disp1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp1_expected_prev);
		$display ("     Real value = %b", disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp1_exp[4] = disp1_expected_prev[4];
	end
	if (
		( disp2_expected_prev[0] !== 1'bx ) && ( disp2_prev[0] !== disp2_expected_prev[0] )
		&& ((disp2_expected_prev[0] !== last_disp2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp2_expected_prev);
		$display ("     Real value = %b", disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_disp2_exp[0] = disp2_expected_prev[0];
	end
	if (
		( disp2_expected_prev[1] !== 1'bx ) && ( disp2_prev[1] !== disp2_expected_prev[1] )
		&& ((disp2_expected_prev[1] !== last_disp2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp2_expected_prev);
		$display ("     Real value = %b", disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_disp2_exp[1] = disp2_expected_prev[1];
	end
	if (
		( disp2_expected_prev[2] !== 1'bx ) && ( disp2_prev[2] !== disp2_expected_prev[2] )
		&& ((disp2_expected_prev[2] !== last_disp2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp2_expected_prev);
		$display ("     Real value = %b", disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_disp2_exp[2] = disp2_expected_prev[2];
	end
	if (
		( disp2_expected_prev[3] !== 1'bx ) && ( disp2_prev[3] !== disp2_expected_prev[3] )
		&& ((disp2_expected_prev[3] !== last_disp2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp2_expected_prev);
		$display ("     Real value = %b", disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_disp2_exp[3] = disp2_expected_prev[3];
	end
	if (
		( disp2_expected_prev[4] !== 1'bx ) && ( disp2_prev[4] !== disp2_expected_prev[4] )
		&& ((disp2_expected_prev[4] !== last_disp2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp2_expected_prev);
		$display ("     Real value = %b", disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_disp2_exp[4] = disp2_expected_prev[4];
	end
	if (
		( disp3_expected_prev[0] !== 1'bx ) && ( disp3_prev[0] !== disp3_expected_prev[0] )
		&& ((disp3_expected_prev[0] !== last_disp3_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp3_expected_prev);
		$display ("     Real value = %b", disp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_disp3_exp[0] = disp3_expected_prev[0];
	end
	if (
		( disp3_expected_prev[1] !== 1'bx ) && ( disp3_prev[1] !== disp3_expected_prev[1] )
		&& ((disp3_expected_prev[1] !== last_disp3_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp3_expected_prev);
		$display ("     Real value = %b", disp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_disp3_exp[1] = disp3_expected_prev[1];
	end
	if (
		( disp3_expected_prev[2] !== 1'bx ) && ( disp3_prev[2] !== disp3_expected_prev[2] )
		&& ((disp3_expected_prev[2] !== last_disp3_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp3_expected_prev);
		$display ("     Real value = %b", disp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_disp3_exp[2] = disp3_expected_prev[2];
	end
	if (
		( disp3_expected_prev[3] !== 1'bx ) && ( disp3_prev[3] !== disp3_expected_prev[3] )
		&& ((disp3_expected_prev[3] !== last_disp3_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp3_expected_prev);
		$display ("     Real value = %b", disp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_disp3_exp[3] = disp3_expected_prev[3];
	end
	if (
		( disp3_expected_prev[4] !== 1'bx ) && ( disp3_prev[4] !== disp3_expected_prev[4] )
		&& ((disp3_expected_prev[4] !== last_disp3_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp3_expected_prev);
		$display ("     Real value = %b", disp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_disp3_exp[4] = disp3_expected_prev[4];
	end
	if (
		( enULAregs_expected_prev !== 1'bx ) && ( enULAregs_prev !== enULAregs_expected_prev )
		&& ((enULAregs_expected_prev !== last_enULAregs_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enULAregs :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enULAregs_expected_prev);
		$display ("     Real value = %b", enULAregs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_enULAregs_exp = enULAregs_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module memoriaRAM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] address;
reg clear;
reg clk;
reg [4:0] data;
reg R/W;
// wires                                               
wire [4:0] data_out;
wire [4:0] disp0;
wire [4:0] disp1;
wire [4:0] disp2;
wire [4:0] disp3;
wire enULAregs;

wire sampler;                             

// assign statements (if any)                          
memoriaRAM i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.clear(clear),
	.clk(clk),
	.data(data),
	.data_out(data_out),
	.disp0(disp0),
	.disp1(disp1),
	.disp2(disp2),
	.disp3(disp3),
	.enULAregs(enULAregs),
	.\R/W (R/W)
);

// clk
initial
begin
	repeat(33)
	begin
		clk = 1'b0;
		clk = #15000 1'b1;
		# 15000;
	end
	clk = 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b1;
	address[4] = #780000 1'b0;
	address[4] = #170000 1'b1;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b0;
	address[3] = #60000 1'b1;
	address[3] = #720000 1'b0;
	address[3] = #170000 1'b1;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b1;
	address[2] = #780000 1'b0;
	address[2] = #170000 1'b1;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b1;
	address[1] = #780000 1'b0;
	address[1] = #170000 1'b1;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b1;
	address[0] = #780000 1'b0;
	address[0] = #170000 1'b1;
end 

// R/W
initial
begin
	R/W = 1'b1;
	R/W = #120000 1'b0;
	R/W = #100000 1'b1;
	R/W = #30000 1'b0;
	R/W = #90000 1'b1;
	R/W = #260000 1'b0;
	R/W = #150000 1'b1;
	R/W = #150000 1'b0;
end 

// clear
initial
begin
	clear = 1'b0;
	clear = #200000 1'b1;
	clear = #50000 1'b0;
	clear = #470000 1'b1;
	clear = #80000 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b1;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
	data[3] = #800000 1'b1;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b1;
	data[2] = #800000 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b1;
	data[1] = #400000 1'b0;
	data[1] = #400000 1'b1;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b1;
	data[0] = #400000 1'b0;
	data[0] = #400000 1'b1;
end 

memoriaRAM_vlg_sample_tst tb_sample (
	.address(address),
	.clear(clear),
	.clk(clk),
	.data(data),
	.R/W(R/W),
	.sampler_tx(sampler)
);

memoriaRAM_vlg_check_tst tb_out(
	.data_out(data_out),
	.disp0(disp0),
	.disp1(disp1),
	.disp2(disp2),
	.disp3(disp3),
	.enULAregs(enULAregs),
	.sampler_rx(sampler)
);
endmodule

