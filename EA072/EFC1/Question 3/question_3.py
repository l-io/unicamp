# -*- coding: utf-8 -*-
"""question_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G6wRncIUap2V16gDA6gAIzYhY2Nao6Su
"""

import tensorflow as tf
import os

numberNeurons = 512
epochsTraining = 5
dropout = 0.5

bestAcc = 0

mnist = tf.keras.datasets.mnist
(x_train, y_train),(x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0



for i in range (0,3):
  for j in range (1,4):
    model = tf.keras.models.Sequential([
    tf.keras.layers.Flatten(),
     tf.keras.layers.Dense( numberNeurons*(2**i) , activation=tf.nn.relu),
     tf.keras.layers.Dropout( dropout ),
     tf.keras.layers.Dense(10, activation=tf.nn.softmax)
    ])

    
    print("\nNeurons: %d neurons - Epochs: %d epochs" %(numberNeurons*(2**i), epochsTraining*j))
    model.compile(optimizer='adam',
     loss='sparse_categorical_crossentropy',
     metrics=['accuracy'])

 
    model.fit(x_train, y_train, epochs= epochsTraining*j )
    values = model.evaluate(x_test, y_test)
    
    if(values[1] > bestAcc):
      bestAcc = values[1]
      bestNeurons = numberNeurons*(2**i)
      bestEpoch = epochsTraining*j
      bestDrop = dropout
    
    model_json = model.to_json()
    json_file = open("model_MLP.json", "w")
    json_file.write(model_json)
    json_file.close()
    model.save_weights("model_MLP.h5")
    print("Model saved to disk")
    os.getcwd()
    
print("-----------------")
print(bestAcc)
print(bestNeurons)
print(bestEpoch)
print(bestDrop)