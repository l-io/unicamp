// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/17/2018 14:37:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CircuitoFinal
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CircuitoFinal_vlg_sample_tst(
	SW,
	sampler_tx
);
input [9:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CircuitoFinal_vlg_check_tst (
	A,
	Ac,
	B,
	D,
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	LEDG,
	LEDR,
	sampler_rx
);
input [3:0] A;
input [3:0] Ac;
input [3:0] B;
input [3:0] D;
input [0:6] HEX0;
input [0:6] HEX1;
input [0:6] HEX2;
input [0:6] HEX3;
input [3:0] LEDG;
input [3:0] LEDR;
input sampler_rx;

reg [3:0] A_expected;
reg [3:0] Ac_expected;
reg [3:0] B_expected;
reg [3:0] D_expected;
reg [0:6] HEX0_expected;
reg [0:6] HEX1_expected;
reg [0:6] HEX2_expected;
reg [0:6] HEX3_expected;
reg [3:0] LEDG_expected;
reg [3:0] LEDR_expected;

reg [3:0] A_prev;
reg [3:0] Ac_prev;
reg [3:0] B_prev;
reg [3:0] D_prev;
reg [0:6] HEX0_prev;
reg [0:6] HEX1_prev;
reg [0:6] HEX2_prev;
reg [0:6] HEX3_prev;
reg [3:0] LEDG_prev;
reg [3:0] LEDR_prev;

reg [3:0] LEDR_expected_prev;

reg [3:0] last_LEDR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	Ac_prev = Ac;
	B_prev = B;
	D_prev = D;
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	LEDG_prev = LEDG;
	LEDR_prev = LEDR;
end

// update expected /o prevs

always @(trigger)
begin
	LEDR_expected_prev = LEDR_expected;
end



// expected LEDR[3]
initial
begin
	LEDR_expected[3] = 1'bX;
end 

// expected LEDR[2]
initial
begin
	LEDR_expected[2] = 1'bX;
end 

// expected LEDR[1]
initial
begin
	LEDR_expected[1] = 1'bX;
end 

// expected LEDR[0]
initial
begin
	LEDR_expected[0] = 1'bX;
end 
// generate trigger
always @(A_expected or A or Ac_expected or Ac or B_expected or B or D_expected or D or HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX3_expected or HEX3 or LEDG_expected or LEDG or LEDR_expected or LEDR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected Ac = %b | expected B = %b | expected D = %b | expected HEX0 = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX3 = %b | expected LEDG = %b | expected LEDR = %b | ",A_expected_prev,Ac_expected_prev,B_expected_prev,D_expected_prev,HEX0_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX3_expected_prev,LEDG_expected_prev,LEDR_expected_prev);
	$display("| real A = %b | real Ac = %b | real B = %b | real D = %b | real HEX0 = %b | real HEX1 = %b | real HEX2 = %b | real HEX3 = %b | real LEDG = %b | real LEDR = %b | ",A_prev,Ac_prev,B_prev,D_prev,HEX0_prev,HEX1_prev,HEX2_prev,HEX3_prev,LEDG_prev,LEDR_prev);
`endif
	if (
		( LEDR_expected_prev[0] !== 1'bx ) && ( LEDR_prev[0] !== LEDR_expected_prev[0] )
		&& ((LEDR_expected_prev[0] !== last_LEDR_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[0] = LEDR_expected_prev[0];
	end
	if (
		( LEDR_expected_prev[1] !== 1'bx ) && ( LEDR_prev[1] !== LEDR_expected_prev[1] )
		&& ((LEDR_expected_prev[1] !== last_LEDR_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[1] = LEDR_expected_prev[1];
	end
	if (
		( LEDR_expected_prev[2] !== 1'bx ) && ( LEDR_prev[2] !== LEDR_expected_prev[2] )
		&& ((LEDR_expected_prev[2] !== last_LEDR_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[2] = LEDR_expected_prev[2];
	end
	if (
		( LEDR_expected_prev[3] !== 1'bx ) && ( LEDR_prev[3] !== LEDR_expected_prev[3] )
		&& ((LEDR_expected_prev[3] !== last_LEDR_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR_exp[3] = LEDR_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module CircuitoFinal_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] SW;
// wires                                               
wire [3:0] A;
wire [3:0] Ac;
wire [3:0] B;
wire [3:0] D;
wire [0:6] HEX0;
wire [0:6] HEX1;
wire [0:6] HEX2;
wire [0:6] HEX3;
wire [3:0] LEDG;
wire [3:0] LEDR;

wire sampler;                             

// assign statements (if any)                          
CircuitoFinal i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.Ac(Ac),
	.B(B),
	.D(D),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.SW(SW)
);

// SW[3]
initial
begin
	repeat(4)
	begin
		SW[3] = 1'b0;
		SW[3] = #120000 1'b1;
		# 120000;
	end
	SW[3] = 1'b0;
end 

// SW[2]
initial
begin
	repeat(8)
	begin
		SW[2] = 1'b0;
		SW[2] = #60000 1'b1;
		# 60000;
	end
	SW[2] = 1'b0;
end 

// SW[1]
initial
begin
	repeat(16)
	begin
		SW[1] = 1'b0;
		SW[1] = #30000 1'b1;
		# 30000;
	end
	SW[1] = 1'b0;
	SW[1] = #30000 1'b1;
end 

// SW[0]
initial
begin
	repeat(33)
	begin
		SW[0] = 1'b0;
		SW[0] = #15000 1'b1;
		# 15000;
	end
	SW[0] = 1'b0;
end 

CircuitoFinal_vlg_sample_tst tb_sample (
	.SW(SW),
	.sampler_tx(sampler)
);

CircuitoFinal_vlg_check_tst tb_out(
	.A(A),
	.Ac(Ac),
	.B(B),
	.D(D),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.sampler_rx(sampler)
);
endmodule

