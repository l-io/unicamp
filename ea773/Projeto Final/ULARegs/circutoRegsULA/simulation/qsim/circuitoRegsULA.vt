// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/02/2018 09:55:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    circuitoRegsULA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module circuitoRegsULA_vlg_sample_tst(
	clear,
	clk,
	DATA_BAR,
	enA,
	enAc,
	enB,
	enF,
	instr,
	ldab,
	ldam,
	load_ULA,
	movAc,
	PC,
	R/W,
	stac,
	switches,
	sampler_tx
);
input  clear;
input  clk;
input [2:0] DATA_BAR;
input  enA;
input  enAc;
input  enB;
input  enF;
input [7:0] instr;
input  ldab;
input  ldam;
input  load_ULA;
input  movAc;
input [4:0] PC;
input  R/W;
input  stac;
input [4:0] switches;
output sampler_tx;

reg sample;
time current_time;
always @(clear or clk or DATA_BAR or enA or enAc or enB or enF or instr or ldab or ldam or load_ULA or movAc or PC or R/W or stac or switches)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module circuitoRegsULA_vlg_check_tst (
	A,
	ADD,
	B,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	result,
	Z,
	sampler_rx
);
input [4:0] A;
input [7:0] ADD;
input [4:0] B;
input [4:0] HEX1;
input [4:0] HEX2;
input [4:0] HEX3;
input [4:0] HEX4;
input [4:0] result;
input  Z;
input sampler_rx;

reg [4:0] A_expected;
reg [7:0] ADD_expected;
reg [4:0] B_expected;
reg [4:0] HEX1_expected;
reg [4:0] HEX2_expected;
reg [4:0] HEX3_expected;
reg [4:0] HEX4_expected;
reg [4:0] result_expected;
reg  Z_expected;

reg [4:0] A_prev;
reg [7:0] ADD_prev;
reg [4:0] B_prev;
reg [4:0] HEX1_prev;
reg [4:0] HEX2_prev;
reg [4:0] HEX3_prev;
reg [4:0] HEX4_prev;
reg [4:0] result_prev;
reg  Z_prev;

reg [4:0] HEX1_expected_prev;
reg [4:0] HEX2_expected_prev;
reg [4:0] HEX3_expected_prev;
reg [4:0] HEX4_expected_prev;
reg [4:0] result_expected_prev;
reg  Z_expected_prev;

reg [4:0] last_HEX1_exp;
reg [4:0] last_HEX2_exp;
reg [4:0] last_HEX3_exp;
reg [4:0] last_HEX4_exp;
reg [4:0] last_result_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	ADD_prev = ADD;
	B_prev = B;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	HEX4_prev = HEX4;
	result_prev = result;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	HEX1_expected_prev = HEX1_expected;
	HEX2_expected_prev = HEX2_expected;
	HEX3_expected_prev = HEX3_expected;
	HEX4_expected_prev = HEX4_expected;
	result_expected_prev = result_expected;
	Z_expected_prev = Z_expected;
end



// expected Z
initial
begin
	Z_expected = 1'bX;
end 
// expected HEX1[ 4 ]
initial
begin
	HEX1_expected[4] = 1'bX;
end 
// expected HEX1[ 3 ]
initial
begin
	HEX1_expected[3] = 1'bX;
end 
// expected HEX1[ 2 ]
initial
begin
	HEX1_expected[2] = 1'bX;
end 
// expected HEX1[ 1 ]
initial
begin
	HEX1_expected[1] = 1'bX;
end 
// expected HEX1[ 0 ]
initial
begin
	HEX1_expected[0] = 1'bX;
end 
// expected HEX2[ 4 ]
initial
begin
	HEX2_expected[4] = 1'bX;
end 
// expected HEX2[ 3 ]
initial
begin
	HEX2_expected[3] = 1'bX;
end 
// expected HEX2[ 2 ]
initial
begin
	HEX2_expected[2] = 1'bX;
end 
// expected HEX2[ 1 ]
initial
begin
	HEX2_expected[1] = 1'bX;
end 
// expected HEX2[ 0 ]
initial
begin
	HEX2_expected[0] = 1'bX;
end 
// expected HEX3[ 4 ]
initial
begin
	HEX3_expected[4] = 1'bX;
end 
// expected HEX3[ 3 ]
initial
begin
	HEX3_expected[3] = 1'bX;
end 
// expected HEX3[ 2 ]
initial
begin
	HEX3_expected[2] = 1'bX;
end 
// expected HEX3[ 1 ]
initial
begin
	HEX3_expected[1] = 1'bX;
end 
// expected HEX3[ 0 ]
initial
begin
	HEX3_expected[0] = 1'bX;
end 
// expected HEX4[ 4 ]
initial
begin
	HEX4_expected[4] = 1'bX;
end 
// expected HEX4[ 3 ]
initial
begin
	HEX4_expected[3] = 1'bX;
end 
// expected HEX4[ 2 ]
initial
begin
	HEX4_expected[2] = 1'bX;
end 
// expected HEX4[ 1 ]
initial
begin
	HEX4_expected[1] = 1'bX;
end 
// expected HEX4[ 0 ]
initial
begin
	HEX4_expected[0] = 1'bX;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 
// generate trigger
always @(A_expected or A or ADD_expected or ADD or B_expected or B or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX3_expected or HEX3 or HEX4_expected or HEX4 or result_expected or result or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected ADD = %b | expected B = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX3 = %b | expected HEX4 = %b | expected result = %b | expected Z = %b | ",A_expected_prev,ADD_expected_prev,B_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX3_expected_prev,HEX4_expected_prev,result_expected_prev,Z_expected_prev);
	$display("| real A = %b | real ADD = %b | real B = %b | real HEX1 = %b | real HEX2 = %b | real HEX3 = %b | real HEX4 = %b | real result = %b | real Z = %b | ",A_prev,ADD_prev,B_prev,HEX1_prev,HEX2_prev,HEX3_prev,HEX4_prev,result_prev,Z_prev);
`endif
	if (
		( HEX1_expected_prev[0] !== 1'bx ) && ( HEX1_prev[0] !== HEX1_expected_prev[0] )
		&& ((HEX1_expected_prev[0] !== last_HEX1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX1_exp[0] = HEX1_expected_prev[0];
	end
	if (
		( HEX1_expected_prev[1] !== 1'bx ) && ( HEX1_prev[1] !== HEX1_expected_prev[1] )
		&& ((HEX1_expected_prev[1] !== last_HEX1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX1_exp[1] = HEX1_expected_prev[1];
	end
	if (
		( HEX1_expected_prev[2] !== 1'bx ) && ( HEX1_prev[2] !== HEX1_expected_prev[2] )
		&& ((HEX1_expected_prev[2] !== last_HEX1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX1_exp[2] = HEX1_expected_prev[2];
	end
	if (
		( HEX1_expected_prev[3] !== 1'bx ) && ( HEX1_prev[3] !== HEX1_expected_prev[3] )
		&& ((HEX1_expected_prev[3] !== last_HEX1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX1_exp[3] = HEX1_expected_prev[3];
	end
	if (
		( HEX1_expected_prev[4] !== 1'bx ) && ( HEX1_prev[4] !== HEX1_expected_prev[4] )
		&& ((HEX1_expected_prev[4] !== last_HEX1_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX1_exp[4] = HEX1_expected_prev[4];
	end
	if (
		( HEX2_expected_prev[0] !== 1'bx ) && ( HEX2_prev[0] !== HEX2_expected_prev[0] )
		&& ((HEX2_expected_prev[0] !== last_HEX2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX2_exp[0] = HEX2_expected_prev[0];
	end
	if (
		( HEX2_expected_prev[1] !== 1'bx ) && ( HEX2_prev[1] !== HEX2_expected_prev[1] )
		&& ((HEX2_expected_prev[1] !== last_HEX2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX2_exp[1] = HEX2_expected_prev[1];
	end
	if (
		( HEX2_expected_prev[2] !== 1'bx ) && ( HEX2_prev[2] !== HEX2_expected_prev[2] )
		&& ((HEX2_expected_prev[2] !== last_HEX2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX2_exp[2] = HEX2_expected_prev[2];
	end
	if (
		( HEX2_expected_prev[3] !== 1'bx ) && ( HEX2_prev[3] !== HEX2_expected_prev[3] )
		&& ((HEX2_expected_prev[3] !== last_HEX2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX2_exp[3] = HEX2_expected_prev[3];
	end
	if (
		( HEX2_expected_prev[4] !== 1'bx ) && ( HEX2_prev[4] !== HEX2_expected_prev[4] )
		&& ((HEX2_expected_prev[4] !== last_HEX2_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX2_exp[4] = HEX2_expected_prev[4];
	end
	if (
		( HEX3_expected_prev[0] !== 1'bx ) && ( HEX3_prev[0] !== HEX3_expected_prev[0] )
		&& ((HEX3_expected_prev[0] !== last_HEX3_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX3_exp[0] = HEX3_expected_prev[0];
	end
	if (
		( HEX3_expected_prev[1] !== 1'bx ) && ( HEX3_prev[1] !== HEX3_expected_prev[1] )
		&& ((HEX3_expected_prev[1] !== last_HEX3_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX3_exp[1] = HEX3_expected_prev[1];
	end
	if (
		( HEX3_expected_prev[2] !== 1'bx ) && ( HEX3_prev[2] !== HEX3_expected_prev[2] )
		&& ((HEX3_expected_prev[2] !== last_HEX3_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX3_exp[2] = HEX3_expected_prev[2];
	end
	if (
		( HEX3_expected_prev[3] !== 1'bx ) && ( HEX3_prev[3] !== HEX3_expected_prev[3] )
		&& ((HEX3_expected_prev[3] !== last_HEX3_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX3_exp[3] = HEX3_expected_prev[3];
	end
	if (
		( HEX3_expected_prev[4] !== 1'bx ) && ( HEX3_prev[4] !== HEX3_expected_prev[4] )
		&& ((HEX3_expected_prev[4] !== last_HEX3_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX3_exp[4] = HEX3_expected_prev[4];
	end
	if (
		( HEX4_expected_prev[0] !== 1'bx ) && ( HEX4_prev[0] !== HEX4_expected_prev[0] )
		&& ((HEX4_expected_prev[0] !== last_HEX4_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX4_exp[0] = HEX4_expected_prev[0];
	end
	if (
		( HEX4_expected_prev[1] !== 1'bx ) && ( HEX4_prev[1] !== HEX4_expected_prev[1] )
		&& ((HEX4_expected_prev[1] !== last_HEX4_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX4_exp[1] = HEX4_expected_prev[1];
	end
	if (
		( HEX4_expected_prev[2] !== 1'bx ) && ( HEX4_prev[2] !== HEX4_expected_prev[2] )
		&& ((HEX4_expected_prev[2] !== last_HEX4_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX4_exp[2] = HEX4_expected_prev[2];
	end
	if (
		( HEX4_expected_prev[3] !== 1'bx ) && ( HEX4_prev[3] !== HEX4_expected_prev[3] )
		&& ((HEX4_expected_prev[3] !== last_HEX4_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX4_exp[3] = HEX4_expected_prev[3];
	end
	if (
		( HEX4_expected_prev[4] !== 1'bx ) && ( HEX4_prev[4] !== HEX4_expected_prev[4] )
		&& ((HEX4_expected_prev[4] !== last_HEX4_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX4_exp[4] = HEX4_expected_prev[4];
	end
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module circuitoRegsULA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clear;
reg clk;
reg [2:0] DATA_BAR;
reg enA;
reg enAc;
reg enB;
reg enF;
reg [7:0] instr;
reg ldab;
reg ldam;
reg load_ULA;
reg movAc;
reg [4:0] PC;
reg R/W;
reg stac;
reg [4:0] switches;
// wires                                               
wire [4:0] A;
wire [7:0] ADD;
wire [4:0] B;
wire [4:0] HEX1;
wire [4:0] HEX2;
wire [4:0] HEX3;
wire [4:0] HEX4;
wire [4:0] result;
wire Z;

wire sampler;                             

// assign statements (if any)                          
circuitoRegsULA i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ADD(ADD),
	.B(B),
	.clear(clear),
	.clk(clk),
	.DATA_BAR(DATA_BAR),
	.enA(enA),
	.enAc(enAc),
	.enB(enB),
	.enF(enF),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.instr(instr),
	.ldab(ldab),
	.ldam(ldam),
	.load_ULA(load_ULA),
	.movAc(movAc),
	.PC(PC),
	.\R/W (R/W),
	.result(result),
	.stac(stac),
	.switches(switches),
	.Z(Z)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// clear
initial
begin
	clear = 1'b0;
end 
// DATA_BAR[ 2 ]
initial
begin
	DATA_BAR[2] = 1'b0;
	DATA_BAR[2] = #300000 1'b1;
	DATA_BAR[2] = #190000 1'b0;
end 
// DATA_BAR[ 1 ]
initial
begin
	DATA_BAR[1] = 1'b0;
end 
// DATA_BAR[ 0 ]
initial
begin
	DATA_BAR[0] = 1'b1;
	DATA_BAR[0] = #130000 1'b0;
end 

// enA
initial
begin
	enA = 1'b1;
	enA = #100000 1'b0;
end 

// enB
initial
begin
	enB = 1'b0;
	enB = #520000 1'b1;
	enB = #110000 1'b0;
end 

// enAc
initial
begin
	enAc = 1'b0;
	enAc = #170000 1'b1;
	enAc = #110000 1'b0;
end 

// enF
initial
begin
	enF = 1'b0;
end 
// instr[ 7 ]
initial
begin
	instr[7] = 1'b0;
end 
// instr[ 6 ]
initial
begin
	instr[6] = 1'b0;
end 
// instr[ 5 ]
initial
begin
	instr[5] = 1'b0;
end 
// instr[ 4 ]
initial
begin
	instr[4] = 1'b0;
end 
// instr[ 3 ]
initial
begin
	instr[3] = 1'b0;
end 
// instr[ 2 ]
initial
begin
	instr[2] = 1'b0;
	instr[2] = #310000 1'b1;
	instr[2] = #340000 1'b0;
end 
// instr[ 1 ]
initial
begin
	instr[1] = 1'b0;
end 
// instr[ 0 ]
initial
begin
	instr[0] = 1'b0;
end 

// ldab
initial
begin
	ldab = 1'b0;
end 

// ldam
initial
begin
	ldam = 1'b0;
	ldam = #310000 1'b1;
	ldam = #430000 1'b0;
end 

// load_ULA
initial
begin
	load_ULA = 1'b0;
end 

// movAc
initial
begin
	movAc = 1'b0;
	movAc = #160000 1'b1;
	movAc = #120000 1'b0;
end 
// PC[ 4 ]
initial
begin
	PC[4] = 1'b0;
end 
// PC[ 3 ]
initial
begin
	PC[3] = 1'b0;
end 
// PC[ 2 ]
initial
begin
	PC[2] = 1'b0;
end 
// PC[ 1 ]
initial
begin
	PC[1] = 1'b0;
end 
// PC[ 0 ]
initial
begin
	PC[0] = 1'b0;
end 

// R/W
initial
begin
	R/W = 1'b0;
	R/W = #320000 1'b1;
	R/W = #140000 1'b0;
end 

// stac
initial
begin
	stac = 1'b0;
end 
// switches[ 4 ]
initial
begin
	switches[4] = 1'b0;
end 
// switches[ 3 ]
initial
begin
	switches[3] = 1'b0;
end 
// switches[ 2 ]
initial
begin
	switches[2] = 1'b0;
end 
// switches[ 1 ]
initial
begin
	switches[1] = 1'b1;
	switches[1] = #80000 1'b0;
end 
// switches[ 0 ]
initial
begin
	switches[0] = 1'b0;
end 

circuitoRegsULA_vlg_sample_tst tb_sample (
	.clear(clear),
	.clk(clk),
	.DATA_BAR(DATA_BAR),
	.enA(enA),
	.enAc(enAc),
	.enB(enB),
	.enF(enF),
	.instr(instr),
	.ldab(ldab),
	.ldam(ldam),
	.load_ULA(load_ULA),
	.movAc(movAc),
	.PC(PC),
	.R/W(R/W),
	.stac(stac),
	.switches(switches),
	.sampler_tx(sampler)
);

circuitoRegsULA_vlg_check_tst tb_out(
	.A(A),
	.ADD(ADD),
	.B(B),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.result(result),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

