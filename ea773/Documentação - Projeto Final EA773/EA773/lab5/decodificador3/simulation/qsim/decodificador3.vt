// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/24/2018 15:49:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decodificador3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decodificador3_vlg_sample_tst(
	end_cont0,
	end_cont1,
	end_cont2,
	end_ext0,
	end_ext1,
	end_ext2,
	Instr0,
	Instr1,
	Instr2,
	QA,
	QB,
	sampler_tx
);
input  end_cont0;
input  end_cont1;
input  end_cont2;
input  end_ext0;
input  end_ext1;
input  end_ext2;
input  Instr0;
input  Instr1;
input  Instr2;
input  QA;
input  QB;
output sampler_tx;

reg sample;
time current_time;
always @(end_cont0 or end_cont1 or end_cont2 or end_ext0 or end_ext1 or end_ext2 or Instr0 or Instr1 or Instr2 or QA or QB)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decodificador3_vlg_check_tst (
	DA,
	DB,
	end_prog0,
	end_prog1,
	end_prog2,
	Load_CP,
	sampler_rx
);
input  DA;
input  DB;
input  end_prog0;
input  end_prog1;
input  end_prog2;
input  Load_CP;
input sampler_rx;

reg  DA_expected;
reg  DB_expected;
reg  end_prog0_expected;
reg  end_prog1_expected;
reg  end_prog2_expected;
reg  Load_CP_expected;

reg  DA_prev;
reg  DB_prev;
reg  end_prog0_prev;
reg  end_prog1_prev;
reg  end_prog2_prev;
reg  Load_CP_prev;

reg  DA_expected_prev;
reg  DB_expected_prev;
reg  end_prog0_expected_prev;
reg  end_prog1_expected_prev;
reg  end_prog2_expected_prev;
reg  Load_CP_expected_prev;

reg  last_DA_exp;
reg  last_DB_exp;
reg  last_end_prog0_exp;
reg  last_end_prog1_exp;
reg  last_end_prog2_exp;
reg  last_Load_CP_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	DA_prev = DA;
	DB_prev = DB;
	end_prog0_prev = end_prog0;
	end_prog1_prev = end_prog1;
	end_prog2_prev = end_prog2;
	Load_CP_prev = Load_CP;
end

// update expected /o prevs

always @(trigger)
begin
	DA_expected_prev = DA_expected;
	DB_expected_prev = DB_expected;
	end_prog0_expected_prev = end_prog0_expected;
	end_prog1_expected_prev = end_prog1_expected;
	end_prog2_expected_prev = end_prog2_expected;
	Load_CP_expected_prev = Load_CP_expected;
end



// expected end_prog2
initial
begin
	end_prog2_expected = 1'bX;
end 

// expected end_prog1
initial
begin
	end_prog1_expected = 1'bX;
end 

// expected end_prog0
initial
begin
	end_prog0_expected = 1'bX;
end 

// expected DA
initial
begin
	DA_expected = 1'bX;
end 

// expected DB
initial
begin
	DB_expected = 1'bX;
end 

// expected Load_CP
initial
begin
	Load_CP_expected = 1'bX;
end 
// generate trigger
always @(DA_expected or DA or DB_expected or DB or end_prog0_expected or end_prog0 or end_prog1_expected or end_prog1 or end_prog2_expected or end_prog2 or Load_CP_expected or Load_CP)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DA = %b | expected DB = %b | expected end_prog0 = %b | expected end_prog1 = %b | expected end_prog2 = %b | expected Load_CP = %b | ",DA_expected_prev,DB_expected_prev,end_prog0_expected_prev,end_prog1_expected_prev,end_prog2_expected_prev,Load_CP_expected_prev);
	$display("| real DA = %b | real DB = %b | real end_prog0 = %b | real end_prog1 = %b | real end_prog2 = %b | real Load_CP = %b | ",DA_prev,DB_prev,end_prog0_prev,end_prog1_prev,end_prog2_prev,Load_CP_prev);
`endif
	if (
		( DA_expected_prev !== 1'bx ) && ( DA_prev !== DA_expected_prev )
		&& ((DA_expected_prev !== last_DA_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DA_expected_prev);
		$display ("     Real value = %b", DA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DA_exp = DA_expected_prev;
	end
	if (
		( DB_expected_prev !== 1'bx ) && ( DB_prev !== DB_expected_prev )
		&& ((DB_expected_prev !== last_DB_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DB_expected_prev);
		$display ("     Real value = %b", DB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DB_exp = DB_expected_prev;
	end
	if (
		( end_prog0_expected_prev !== 1'bx ) && ( end_prog0_prev !== end_prog0_expected_prev )
		&& ((end_prog0_expected_prev !== last_end_prog0_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_prog0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_prog0_expected_prev);
		$display ("     Real value = %b", end_prog0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_end_prog0_exp = end_prog0_expected_prev;
	end
	if (
		( end_prog1_expected_prev !== 1'bx ) && ( end_prog1_prev !== end_prog1_expected_prev )
		&& ((end_prog1_expected_prev !== last_end_prog1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_prog1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_prog1_expected_prev);
		$display ("     Real value = %b", end_prog1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_end_prog1_exp = end_prog1_expected_prev;
	end
	if (
		( end_prog2_expected_prev !== 1'bx ) && ( end_prog2_prev !== end_prog2_expected_prev )
		&& ((end_prog2_expected_prev !== last_end_prog2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_prog2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_prog2_expected_prev);
		$display ("     Real value = %b", end_prog2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_end_prog2_exp = end_prog2_expected_prev;
	end
	if (
		( Load_CP_expected_prev !== 1'bx ) && ( Load_CP_prev !== Load_CP_expected_prev )
		&& ((Load_CP_expected_prev !== last_Load_CP_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Load_CP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Load_CP_expected_prev);
		$display ("     Real value = %b", Load_CP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Load_CP_exp = Load_CP_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decodificador3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg end_cont0;
reg end_cont1;
reg end_cont2;
reg end_ext0;
reg end_ext1;
reg end_ext2;
reg Instr0;
reg Instr1;
reg Instr2;
reg QA;
reg QB;
// wires                                               
wire DA;
wire DB;
wire end_prog0;
wire end_prog1;
wire end_prog2;
wire Load_CP;

wire sampler;                             

// assign statements (if any)                          
decodificador3 i1 (
// port map - connection between master ports and signals/registers   
	.DA(DA),
	.DB(DB),
	.end_cont0(end_cont0),
	.end_cont1(end_cont1),
	.end_cont2(end_cont2),
	.end_ext0(end_ext0),
	.end_ext1(end_ext1),
	.end_ext2(end_ext2),
	.end_prog0(end_prog0),
	.end_prog1(end_prog1),
	.end_prog2(end_prog2),
	.Instr0(Instr0),
	.Instr1(Instr1),
	.Instr2(Instr2),
	.Load_CP(Load_CP),
	.QA(QA),
	.QB(QB)
);

// Instr2
always
begin
	Instr2 = 1'b0;
	Instr2 = #200000 1'b1;
	Instr2 = #200000 1'b0;
	Instr2 = #200000 1'b1;
	Instr2 = #200000 1'b0;
	#200000;
end 

// Instr1
always
begin
	Instr1 = 1'b0;
	Instr1 = #100000 1'b1;
	# 100000;
	repeat(3)
	begin
		Instr1 = 1'b0;
		Instr1 = #100000 1'b1;
		# 100000;
	end
	Instr1 = 1'b0;
	Instr1 = #100000 1'b1;
	#100000;
end 

// Instr0
always
begin
	Instr0 = 1'b0;
	Instr0 = #50000 1'b1;
	# 50000;
	repeat(8)
	begin
		Instr0 = 1'b0;
		Instr0 = #50000 1'b1;
		# 50000;
	end
	Instr0 = 1'b0;
	Instr0 = #50000 1'b1;
	#50000;
end 

// QA
initial
begin
	QA = 1'b0;
	QA = #40000 1'b1;
	QA = #50000 1'b0;
	QA = #50000 1'b1;
	QA = #50000 1'b0;
	QA = #50000 1'b1;
	QA = #100000 1'b0;
end 

// QB
initial
begin
	QB = 1'b0;
	QB = #10000 1'b1;
	QB = #80000 1'b0;
	QB = #100000 1'b1;
	QB = #50000 1'b0;
	QB = #100000 1'b1;
	QB = #50000 1'b0;
end 

// end_cont2
initial
begin
	end_cont2 = 1'b0;
	end_cont2 = #10000 1'b1;
	end_cont2 = #80000 1'b0;
	end_cont2 = #50000 1'b1;
	end_cont2 = #50000 1'b0;
end 

// end_cont1
initial
begin
	end_cont1 = 1'b0;
	end_cont1 = #10000 1'b1;
	end_cont1 = #30000 1'b0;
	end_cont1 = #100000 1'b1;
	end_cont1 = #50000 1'b0;
end 

// end_cont0
initial
begin
	end_cont0 = 1'b0;
	end_cont0 = #10000 1'b1;
	end_cont0 = #30000 1'b0;
	end_cont0 = #200000 1'b1;
	end_cont0 = #50000 1'b0;
end 

// end_ext2
initial
begin
	end_ext2 = 1'b0;
end 

// end_ext1
initial
begin
	end_ext1 = 1'b0;
	end_ext1 = #10000 1'b1;
	end_ext1 = #80000 1'b0;
	end_ext1 = #50000 1'b1;
	end_ext1 = #50000 1'b0;
end 

// end_ext0
initial
begin
	end_ext0 = 1'b0;
	end_ext0 = #40000 1'b1;
	end_ext0 = #50000 1'b0;
	end_ext0 = #200000 1'b1;
	end_ext0 = #50000 1'b0;
end 

decodificador3_vlg_sample_tst tb_sample (
	.end_cont0(end_cont0),
	.end_cont1(end_cont1),
	.end_cont2(end_cont2),
	.end_ext0(end_ext0),
	.end_ext1(end_ext1),
	.end_ext2(end_ext2),
	.Instr0(Instr0),
	.Instr1(Instr1),
	.Instr2(Instr2),
	.QA(QA),
	.QB(QB),
	.sampler_tx(sampler)
);

decodificador3_vlg_check_tst tb_out(
	.DA(DA),
	.DB(DB),
	.end_prog0(end_prog0),
	.end_prog1(end_prog1),
	.end_prog2(end_prog2),
	.Load_CP(Load_CP),
	.sampler_rx(sampler)
);
endmodule

